# fun(x) = ( b(x) - c(x) ) / √w
# kde:
# 	a = ( q + √w ) / e
# 	b(x) = a^x
# 	c(x) = (-q/a)^x
# a konstanty q, w, e, x získáte ze vstupní pásky:
# 000001000101000010111000

# toto zadani: q=1, w=5, e=2, x=32+16+8=56
# sqrt(5) = 2,2360679774997896964091736687313

#inicializace registru:
# r[1]=index, r[2]=q, r[3]=w, r[4]=e, r[5]=x, 
# r[6]=√w, r[7]=a, r[8]=b(x), r[9]=c(x), zbytek pomocne
1. LOAD =2 # index reg. ukazuje na r2, od r2 po r9 naplnim zatim 0
2. STORE 1
3. LOAD =0
4. STORE *1
5. LOAD 1
6. ADD =1
7. STORE 1
8. SUB =13
9. JZERO 11
10. JUMP 3 # inicializuj dalsi registr, az po hodnotu na radku c. 8 (celk. pocet registru)

# parsovani vstupu - binarni tvar na double v registrech

11. LOAD =2 # nastaveni r[1] na 2
12. STORE 1
13. READ # highest value bit
14. MUL =32
15. STORE *1
16. READ
17. MUL =16
18. ADD *1
19. STORE *1
20. READ
21. MUL =8
22. ADD *1
23. STORE *1
24. READ
25. MUL =4
26. ADD *1
27. STORE *1
28. READ
29. MUL =2
30. ADD *1
31. STORE *1
32. READ
33. ADD *1
34. STORE *1
35. LOAD 1 # increment index in r[1], if r[5] was set, go on
36. SUB =5
37. JZERO 41
38. ADD =6
39. STORE 1
40. JUMP 13

# calculate √w==r[6]; r[3]=w, r[7]=hi, r[8]=mid, r[9]=lo, [10], [11], [12] pomocne

# metoda pro aproximaci √w: https://stackoverflow.com/a/39712957
# double root(double w){
#  double lo = 0, hi = w, mid;
#  for(int i = 0 ; i < 1000 ; i++){
#       mid = (lo+hi)/2;
#       if(mid*mid == w) return mid;
#       if(mid*mid > w) hi = mid;
#       else lo = mid;
#   }
#   return mid;
# }
41. LOAD 3
42. STORE 7
43. LOAD =0 # index v r1 od 0..1000
44. STORE 1
# loop
45. LOAD 7
46. ADD 9
47. DIV =2 # ==mid v r0
48. STORE 8 # mid ve svem registru

# if(mid*mid == w) return mid;
49. MUL 0
50. SUB 3
51. JZERO 56 # if(mid*mid == w) return mid;
52. JGTZ 59 # if(mid*mid > w) hi = mid;

# else lo = mid; # r[9]=r[8]
53. LOAD 8
54. STORE 9
55. JUMP 61 # increment index counter, continue loop

# if(mid*mid == w) return mid;
56. LOAD 8
57. STORE 6 # value v r0 -> r6 (misto pro √w)
58. JUMP 69

# if(mid*mid > w) hi = mid;, uloz z r8 do r7
59. LOAD 8
60. STORE 7
61. LOAD 1 # increment index counter, if 1000, return, if not, continue
62. SUB =1000
63. JZERO 67 # return mid;
64. ADD =1001
65. STORE 1
66. JUMP 45 # back to loop

# return mid; (after end of the loop)
67. LOAD 8
68. STORE 6

# √w ted je v r[6], zbyva pocitat
# r[2]=q, r[3]=w, r[4]=e, r[5]=x
 
# r[7]= a = ( q + √w ) / e
69. LOAD 2
70. ADD 6
71. DIV 4
72. STORE 7

# r[8]= b(x) = a^x
73. LOAD 5
74. JGTZ 78 # netrivialni pripad, jinak a^0 = 1
75. LOAD =1
76. STORE 8
77. JUMP 89

78. LOAD 5
79. STORE 1 # index counter ted==x
80. LOAD =1 # r[0] = 1
81. MUL 7 	# x > 0, r[0]*a
82. STORE 8	# uloz do r[8] == b
83. LOAD 1
84. SUB =1
85. JZERO 89
86. STORE 1
87. LOAD 8	# get accumulated value
88. JUMP 81

# r[9]= c(x) = (-q/a)^x
89. LOAD 5
90. JGTZ 94 # netrivialni pripad, jinak (-q/a)^0 = 1
91. LOAD =1
92. STORE 9 # c(x) = 1
93. JUMP 109

94. LOAD =0
95. SUB 2
96. DIV 7
97. STORE 10 # ulozim (-q/a) do pomocneho r[10]

# pocitam c(x) = (-q/a)^x
98. LOAD 5
99. STORE 1 # index counter ted==x
100. LOAD =1
101. MUL 10	# r[0]*=(-q/a)
102. STORE 9
103. LOAD 1
104. SUB =1
105. JZERO 109
106. STORE 1
107. LOAD 9	# get accumulated value
108. JUMP 101

# r[9] je ted == c(x)

# pocitani fun(x) = ( b(x) - c(x) ) / √w
# fun(x) = (r[8] - r[9]) / r[6]
109. LOAD 8	# nacti b(x)
110. SUB 9	# -c(x)
111. DIV 6	# / √w
112. WRITE
113. HALT
